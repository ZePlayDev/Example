Задание 1

CREATE TABLE events (
    eventID Int64,
    eventType String,
    userID Int64,
    eventTime DateTime,
    payload String
) ENGINE = MergeTree
ORDER BY (eventID, eventTime);


Выборка всех уникальных eventType, у которых более 1000 событий:
SELECT eventType
FROM events
GROUP BY eventType
HAVING count(*) > 1000;

Выборка событий, которые произошли в первый день каждого месяца:
SELECT *
FROM events
WHERE toDate(eventTime) = toStartOfMonth(eventTime);

Выборка пользователей, которые совершили более 3 различных eventType:
SELECT userID
FROM events
GROUP BY userID
HAVING count(DISTINCT eventType) > 3;\

Задание 2

Вставка тестовых данных в таблицу events
package main
func main() {
    connect, err := sql.Open("clickhouse", "tcp://localhost:9000?debug=true")
    if err != nil {
        log.Fatalf("Failed to connect to ClickHouse: %v", err)
    }
    defer connect.Close()

    // Вставка данных
    _, err = connect.Exec(`
        INSERT INTO events (eventID, eventType, userID, eventTime, payload) VALUES (?, ?, ?, ?, ?)
    `, 1, "login", 1, time.Now(), "{\"some_field\":\"some_value\"}")
    if err != nil {
        log.Fatalf("Failed to insert data: %v", err)
    }
    fmt.Println("Data inserted successfully")
}

Вывод событий по заданному eventType и временному диапазону
func fetchEvents(connect *sql.DB, eventType string, startTime, endTime time.Time) ([]Event, error) {
    rows, err := connect.Query(`
        SELECT eventID, eventType, userID, eventTime, payload 
        FROM events
        WHERE eventType = ? AND eventTime BETWEEN ? AND ?
    `, eventType, startTime, endTime)
    if err != nil {
        return nil, err
    }
    defer rows.Close()

    var events []Event
    for rows.Next() {
        var e Event
        if err := rows.Scan(&e.eventID, &e.eventType, &e.userID, &e.eventTime, &e.payload); err != nil {
            return nil, err
        }
        events = append(events, e)
    }
    return events, nil
}

Задание 3
package main

type Event struct {
    EventType string    `json:"eventType"`
    UserID    int64     `json:"userID"`
    EventTime time.Time `json:"eventTime"`
    Payload   string    `json:"payload"`
}

func insertEvent(db *sql.DB, e Event) error {
    _, err := db.Exec(`
        INSERT INTO events (eventType, userID, eventTime, payload) VALUES (?, ?, ?, ?)
    `, e.EventType, e.UserID, e.EventTime, e.Payload)
    return err
}

func eventHandler(db *sql.DB) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        if r.Method != "POST" {
            http.Error(w, "Unsupported method", http.StatusMethodNotAllowed)
            return
        }

        var event Event
        if err := json.NewDecoder(r.Body).Decode(&event); err != nil {
            http.Error(w, err.Error(), http.StatusBadRequest)
            return
        }

        if err := insertEvent(db, event); err != nil {
            log.Printf("Failed to insert event: %v", err)
            http.Error(w, "Failed to insert event", http.StatusInternalServerError)
            return
        }

        w.WriteHeader(http.StatusOK)
        json.NewEncoder(w).Encode(map[string]string{"status": "success"})
    }
}

func main() {
    db, err := sql.Open("clickhouse", "tcp://localhost:9000?debug=true")
    if err != nil {
        log.Fatalf("Failed to connect to ClickHouse: %v", err)
    }
    defer db.Close()

    http.HandleFunc("/api/event", eventHandler(db))
    log.Fatal(http.ListenAndServe(":8080", nil))
}
